/*
 * generated by Xtext 2.14.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getHaskellAssignment()); }
		(rule__Model__HaskellAssignment)*
		{ after(grammarAccess.getModelAccess().getHaskellAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHaskell
entryRuleHaskell
:
{ before(grammarAccess.getHaskellRule()); }
	 ruleHaskell
{ after(grammarAccess.getHaskellRule()); } 
	 EOF 
;

// Rule Haskell
ruleHaskell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHaskellAccess().getGroup()); }
		(rule__Haskell__Group__0)
		{ after(grammarAccess.getHaskellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComplement
entryRuleComplement
:
{ before(grammarAccess.getComplementRule()); }
	 ruleComplement
{ after(grammarAccess.getComplementRule()); } 
	 EOF 
;

// Rule Complement
ruleComplement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComplementAccess().getAlternatives()); }
		(rule__Complement__Alternatives)
		{ after(grammarAccess.getComplementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getAlternatives()); }
		(rule__Function__Alternatives)
		{ after(grammarAccess.getFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumbers
entryRuleNumbers
:
{ before(grammarAccess.getNumbersRule()); }
	 ruleNumbers
{ after(grammarAccess.getNumbersRule()); } 
	 EOF 
;

// Rule Numbers
ruleNumbers 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumbersAccess().getAlternatives()); }
		(rule__Numbers__Alternatives)
		{ after(grammarAccess.getNumbersAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcat
entryRuleConcat
:
{ before(grammarAccess.getConcatRule()); }
	 ruleConcat
{ after(grammarAccess.getConcatRule()); } 
	 EOF 
;

// Rule Concat
ruleConcat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConcatAccess().getGroup()); }
		(rule__Concat__Group__0)
		{ after(grammarAccess.getConcatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNewConcat
entryRuleNewConcat
:
{ before(grammarAccess.getNewConcatRule()); }
	 ruleNewConcat
{ after(grammarAccess.getNewConcatRule()); } 
	 EOF 
;

// Rule NewConcat
ruleNewConcat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNewConcatAccess().getGroup()); }
		(rule__NewConcat__Group__0)
		{ after(grammarAccess.getNewConcatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getGroup()); }
		(rule__Element__Group__0)
		{ after(grammarAccess.getElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplementAccess().getIdAssignment_0()); }
		(rule__Complement__IdAssignment_0)
		{ after(grammarAccess.getComplementAccess().getIdAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getComplementAccess().getGroup_1()); }
		(rule__Complement__Group_1__0)
		{ after(grammarAccess.getComplementAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getComplementAccess().getGroup_2()); }
		(rule__Complement__Group_2__0)
		{ after(grammarAccess.getComplementAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getElementAssignment_0()); }
		(rule__Function__ElementAssignment_0)
		{ after(grammarAccess.getFunctionAccess().getElementAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getGroup_1()); }
		(rule__Function__Group_1__0)
		{ after(grammarAccess.getFunctionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getGroup_2()); }
		(rule__Function__Group_2__0)
		{ after(grammarAccess.getFunctionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumbersAccess().getGroup_0()); }
		(rule__Numbers__Group_0__0)
		{ after(grammarAccess.getNumbersAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumbersAccess().getTwoAssignment_1()); }
		(rule__Numbers__TwoAssignment_1)
		{ after(grammarAccess.getNumbersAccess().getTwoAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatAccess().getIdAssignment_1_0()); }
		(rule__Concat__IdAssignment_1_0)
		{ after(grammarAccess.getConcatAccess().getIdAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getConcatAccess().getOpAssignment_1_1()); }
		(rule__Concat__OpAssignment_1_1)
		{ after(grammarAccess.getConcatAccess().getOpAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Haskell__Group__0__Impl
	rule__Haskell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHaskellAccess().getShowKeyword_0()); }
	'show'
	{ after(grammarAccess.getHaskellAccess().getShowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Haskell__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHaskellAccess().getExpressionAssignment_1()); }
	(rule__Haskell__ExpressionAssignment_1)
	{ after(grammarAccess.getHaskellAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getComplementAssignment_0()); }
	(rule__Expression__ComplementAssignment_0)
	{ after(grammarAccess.getExpressionAccess().getComplementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getConcatAssignment_1()); }
	(rule__Expression__ConcatAssignment_1)?
	{ after(grammarAccess.getExpressionAccess().getConcatAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Complement__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complement__Group_1__0__Impl
	rule__Complement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getComplementAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complement__Group_1__1__Impl
	rule__Complement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementAccess().getNumbersAssignment_1_1()); }
	(rule__Complement__NumbersAssignment_1_1)
	{ after(grammarAccess.getComplementAccess().getNumbersAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complement__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getComplementAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Complement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complement__Group_2__0__Impl
	rule__Complement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getComplementAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complement__Group_2__1__Impl
	rule__Complement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementAccess().getFunctionAssignment_2_1()); }
	(rule__Complement__FunctionAssignment_2_1)
	{ after(grammarAccess.getComplementAccess().getFunctionAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complement__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getComplementAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__0__Impl
	rule__Function__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getZipKeyword_1_0()); }
	'zip'
	{ after(grammarAccess.getFunctionAccess().getZipKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__1__Impl
	rule__Function__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftSquareBracketKeyword_1_1()); }
	'['
	{ after(grammarAccess.getFunctionAccess().getLeftSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__2__Impl
	rule__Function__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNumb1Assignment_1_2()); }
	(rule__Function__Numb1Assignment_1_2)
	{ after(grammarAccess.getFunctionAccess().getNumb1Assignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__3__Impl
	rule__Function__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightSquareBracketKeyword_1_3()); }
	']'
	{ after(grammarAccess.getFunctionAccess().getRightSquareBracketKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__4__Impl
	rule__Function__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftSquareBracketKeyword_1_4()); }
	'['
	{ after(grammarAccess.getFunctionAccess().getLeftSquareBracketKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__5__Impl
	rule__Function__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNumb2Assignment_1_5()); }
	(rule__Function__Numb2Assignment_1_5)
	{ after(grammarAccess.getFunctionAccess().getNumb2Assignment_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightSquareBracketKeyword_1_6()); }
	']'
	{ after(grammarAccess.getFunctionAccess().getRightSquareBracketKeyword_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_2__0__Impl
	rule__Function__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLengthKeyword_2_0()); }
	'length'
	{ after(grammarAccess.getFunctionAccess().getLengthKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_2__1__Impl
	rule__Function__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2_1()); }
	'('
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_2__2__Impl
	rule__Function__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getComplementParserRuleCall_2_2()); }
	ruleComplement
	{ after(grammarAccess.getFunctionAccess().getComplementParserRuleCall_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_2_3()); }
	')'
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Numbers__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Numbers__Group_0__0__Impl
	rule__Numbers__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumbersAccess().getOneAssignment_0_0()); }
	(rule__Numbers__OneAssignment_0_0)
	{ after(grammarAccess.getNumbersAccess().getOneAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Numbers__Group_0__1__Impl
	rule__Numbers__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumbersAccess().getCommaKeyword_0_1()); }
	','
	{ after(grammarAccess.getNumbersAccess().getCommaKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Numbers__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumbersAccess().getNumbAssignment_0_2()); }
	(rule__Numbers__NumbAssignment_0_2)
	{ after(grammarAccess.getNumbersAccess().getNumbAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Concat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concat__Group__0__Impl
	rule__Concat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatAccess().getPlusSignPlusSignKeyword_0()); }
	'++'
	{ after(grammarAccess.getConcatAccess().getPlusSignPlusSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concat__Group__1__Impl
	rule__Concat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatAccess().getAlternatives_1()); }
	(rule__Concat__Alternatives_1)
	{ after(grammarAccess.getConcatAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcatAccess().getNewAssignment_2()); }
	(rule__Concat__NewAssignment_2)?
	{ after(grammarAccess.getConcatAccess().getNewAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NewConcat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewConcat__Group__0__Impl
	rule__NewConcat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewConcat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewConcatAccess().getPlusSignPlusSignKeyword_0()); }
	'++'
	{ after(grammarAccess.getNewConcatAccess().getPlusSignPlusSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewConcat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewConcat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewConcat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewConcatAccess().getHaskellAssignment_1()); }
	(rule__NewConcat__HaskellAssignment_1)
	{ after(grammarAccess.getNewConcatAccess().getHaskellAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group__0__Impl
	rule__Element__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getElementAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getGroup_1()); }
	(rule__Element__Group_1__0)*
	{ after(grammarAccess.getElementAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_1__0__Impl
	rule__Element__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getOPTerminalRuleCall_1_0()); }
	RULE_OP
	{ after(grammarAccess.getElementAccess().getOPTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
	{ after(grammarAccess.getElementAccess().getINTTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__HaskellAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getHaskellHaskellParserRuleCall_0()); }
		ruleHaskell
		{ after(grammarAccess.getModelAccess().getHaskellHaskellParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHaskellAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getHaskellAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ComplementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getComplementComplementParserRuleCall_0_0()); }
		ruleComplement
		{ after(grammarAccess.getExpressionAccess().getComplementComplementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ConcatAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getConcatConcatParserRuleCall_1_0()); }
		ruleConcat
		{ after(grammarAccess.getExpressionAccess().getConcatConcatParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__IdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplementAccess().getIdIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getComplementAccess().getIdIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__NumbersAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplementAccess().getNumbersNumbersParserRuleCall_1_1_0()); }
		ruleNumbers
		{ after(grammarAccess.getComplementAccess().getNumbersNumbersParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complement__FunctionAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplementAccess().getFunctionFunctionParserRuleCall_2_1_0()); }
		ruleFunction
		{ after(grammarAccess.getComplementAccess().getFunctionFunctionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getElementElementParserRuleCall_0_0()); }
		ruleElement
		{ after(grammarAccess.getFunctionAccess().getElementElementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Numb1Assignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNumb1NumbersParserRuleCall_1_2_0()); }
		ruleNumbers
		{ after(grammarAccess.getFunctionAccess().getNumb1NumbersParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Numb2Assignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNumb2NumbersParserRuleCall_1_5_0()); }
		ruleNumbers
		{ after(grammarAccess.getFunctionAccess().getNumb2NumbersParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__OneAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumbersAccess().getOneINTTerminalRuleCall_0_0_0()); }
		RULE_INT
		{ after(grammarAccess.getNumbersAccess().getOneINTTerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__NumbAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumbersAccess().getNumbNumbersParserRuleCall_0_2_0()); }
		ruleNumbers
		{ after(grammarAccess.getNumbersAccess().getNumbNumbersParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numbers__TwoAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumbersAccess().getTwoINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumbersAccess().getTwoINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__IdAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatAccess().getIdIDTerminalRuleCall_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getConcatAccess().getIdIDTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatAccess().getOpOPTerminalRuleCall_1_1_0()); }
		RULE_OP
		{ after(grammarAccess.getConcatAccess().getOpOPTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__NewAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcatAccess().getNewNewConcatParserRuleCall_2_0()); }
		ruleNewConcat
		{ after(grammarAccess.getConcatAccess().getNewNewConcatParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewConcat__HaskellAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewConcatAccess().getHaskellHaskellParserRuleCall_1_0()); }
		ruleHaskell
		{ after(grammarAccess.getNewConcatAccess().getHaskellHaskellParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_OP : ('+'|'-'|'/'|'*');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'!'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
