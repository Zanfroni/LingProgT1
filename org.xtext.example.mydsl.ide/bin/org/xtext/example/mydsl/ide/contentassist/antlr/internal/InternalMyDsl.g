/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getHaskellAssignment()); }
		(rule__Model__HaskellAssignment)*
		{ after(grammarAccess.getModelAccess().getHaskellAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHaskell
entryRuleHaskell
:
{ before(grammarAccess.getHaskellRule()); }
	 ruleHaskell
{ after(grammarAccess.getHaskellRule()); } 
	 EOF 
;

// Rule Haskell
ruleHaskell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHaskellAccess().getGroup()); }
		(rule__Haskell__Group__0)
		{ after(grammarAccess.getHaskellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleZIP
entryRuleZIP
:
{ before(grammarAccess.getZIPRule()); }
	 ruleZIP
{ after(grammarAccess.getZIPRule()); } 
	 EOF 
;

// Rule ZIP
ruleZIP 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getZIPAccess().getGroup()); }
		(rule__ZIP__Group__0)
		{ after(grammarAccess.getZIPAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOP
entryRuleOP
:
{ before(grammarAccess.getOPRule()); }
	 ruleOP
{ after(grammarAccess.getOPRule()); } 
	 EOF 
;

// Rule OP
ruleOP 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOPAccess().getInsideAssignment()); }
		(rule__OP__InsideAssignment)*
		{ after(grammarAccess.getOPAccess().getInsideAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleINSIDE
entryRuleINSIDE
:
{ before(grammarAccess.getINSIDERule()); }
	 ruleINSIDE
{ after(grammarAccess.getINSIDERule()); } 
	 EOF 
;

// Rule INSIDE
ruleINSIDE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getINSIDEAccess().getGroup()); }
		(rule__INSIDE__Group__0)
		{ after(grammarAccess.getINSIDEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTAB
entryRuleTAB
:
{ before(grammarAccess.getTABRule()); }
	 ruleTAB
{ after(grammarAccess.getTABRule()); } 
	 EOF 
;

// Rule TAB
ruleTAB 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTABAccess().getAlternatives()); }
		(rule__TAB__Alternatives)
		{ after(grammarAccess.getTABAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleADD
entryRuleADD
:
{ before(grammarAccess.getADDRule()); }
	 ruleADD
{ after(grammarAccess.getADDRule()); } 
	 EOF 
;

// Rule ADD
ruleADD 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getADDAccess().getGroup()); }
		(rule__ADD__Group__0)
		{ after(grammarAccess.getADDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleN
entryRuleN
:
{ before(grammarAccess.getNRule()); }
	 ruleN
{ after(grammarAccess.getNRule()); } 
	 EOF 
;

// Rule N
ruleN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNAccess().getGroup()); }
		(rule__N__Group__0)
		{ after(grammarAccess.getNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getZipAssignment_0()); }
		(rule__Expression__ZipAssignment_0)
		{ after(grammarAccess.getExpressionAccess().getZipAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
		(rule__Expression__Group_1__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_2()); }
		(rule__Expression__Group_2__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNAssignment_3()); }
		(rule__Expression__NAssignment_3)
		{ after(grammarAccess.getExpressionAccess().getNAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TAB__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTABAccess().getContentAssignment_0()); }
		(rule__TAB__ContentAssignment_0)
		{ after(grammarAccess.getTABAccess().getContentAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTABAccess().getAddAssignment_1()); }
		(rule__TAB__AddAssignment_1)*
		{ after(grammarAccess.getTABAccess().getAddAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Haskell__Group__0__Impl
	rule__Haskell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHaskellAccess().getShowKeyword_0()); }
	'show'
	{ after(grammarAccess.getHaskellAccess().getShowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Haskell__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHaskellAccess().getExpressionAssignment_1()); }
	(rule__Haskell__ExpressionAssignment_1)
	{ after(grammarAccess.getHaskellAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOpAssignment_1_1()); }
	(rule__Expression__OpAssignment_1_1)
	{ after(grammarAccess.getExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_2__0__Impl
	rule__Expression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_2__1__Impl
	rule__Expression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getTabAssignment_2_1()); }
	(rule__Expression__TabAssignment_2_1)
	{ after(grammarAccess.getExpressionAccess().getTabAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ZIP__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZIP__Group__0__Impl
	rule__ZIP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZIPAccess().getZipKeyword_0()); }
	'(zip'
	{ after(grammarAccess.getZIPAccess().getZipKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZIP__Group__1__Impl
	rule__ZIP__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZIPAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getZIPAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZIP__Group__2__Impl
	rule__ZIP__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZIPAccess().getOp2Assignment_2()); }
	(rule__ZIP__Op2Assignment_2)
	{ after(grammarAccess.getZIPAccess().getOp2Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZIP__Group__3__Impl
	rule__ZIP__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZIPAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getZIPAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZIP__Group__4__Impl
	rule__ZIP__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZIPAccess().getLeftSquareBracketKeyword_4()); }
	'['
	{ after(grammarAccess.getZIPAccess().getLeftSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZIP__Group__5__Impl
	rule__ZIP__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZIPAccess().getOp3Assignment_5()); }
	(rule__ZIP__Op3Assignment_5)
	{ after(grammarAccess.getZIPAccess().getOp3Assignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZIP__Group__6__Impl
	rule__ZIP__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZIPAccess().getRightSquareBracketKeyword_6()); }
	']'
	{ after(grammarAccess.getZIPAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ZIP__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZIPAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getZIPAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__INSIDE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INSIDE__Group__0__Impl
	rule__INSIDE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__INSIDE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINSIDEAccess().getInside2Assignment_0()); }
	(rule__INSIDE__Inside2Assignment_0)
	{ after(grammarAccess.getINSIDEAccess().getInside2Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSIDE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__INSIDE__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__INSIDE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getINSIDEAccess().getINTEGERTerminalRuleCall_1()); }
	RULE_INTEGER
	{ after(grammarAccess.getINSIDEAccess().getINTEGERTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ADD__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ADD__Group__0__Impl
	rule__ADD__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getADDAccess().getAdd2Assignment_0()); }
	(rule__ADD__Add2Assignment_0)
	{ after(grammarAccess.getADDAccess().getAdd2Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ADD__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getADDAccess().getINTEGERTerminalRuleCall_1()); }
	RULE_INTEGER
	{ after(grammarAccess.getADDAccess().getINTEGERTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__N__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__N__Group__0__Impl
	rule__N__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNAccess().getIntegerAssignment_0()); }
	(rule__N__IntegerAssignment_0)
	{ after(grammarAccess.getNAccess().getIntegerAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__N__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__N__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNAccess().getPrintAssignment_1()); }
	(rule__N__PrintAssignment_1)
	{ after(grammarAccess.getNAccess().getPrintAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__HaskellAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getHaskellHaskellParserRuleCall_0()); }
		ruleHaskell
		{ after(grammarAccess.getModelAccess().getHaskellHaskellParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Haskell__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHaskellAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getHaskellAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ZipAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getZipZIPParserRuleCall_0_0()); }
		ruleZIP
		{ after(grammarAccess.getExpressionAccess().getZipZIPParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOpOPParserRuleCall_1_1_0()); }
		ruleOP
		{ after(grammarAccess.getExpressionAccess().getOpOPParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__TabAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getTabTABParserRuleCall_2_1_0()); }
		ruleTAB
		{ after(grammarAccess.getExpressionAccess().getTabTABParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__NAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getNNParserRuleCall_3_0()); }
		ruleN
		{ after(grammarAccess.getExpressionAccess().getNNParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Op2Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getZIPAccess().getOp2OPParserRuleCall_2_0()); }
		ruleOP
		{ after(grammarAccess.getZIPAccess().getOp2OPParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ZIP__Op3Assignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getZIPAccess().getOp3OPParserRuleCall_5_0()); }
		ruleOP
		{ after(grammarAccess.getZIPAccess().getOp3OPParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OP__InsideAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOPAccess().getInsideINSIDEParserRuleCall_0()); }
		ruleINSIDE
		{ after(grammarAccess.getOPAccess().getInsideINSIDEParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__INSIDE__Inside2Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getINSIDEAccess().getInside2INSIDE2TerminalRuleCall_0_0()); }
		RULE_INSIDE2
		{ after(grammarAccess.getINSIDEAccess().getInside2INSIDE2TerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TAB__ContentAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTABAccess().getContentCONTENTTerminalRuleCall_0_0()); }
		RULE_CONTENT
		{ after(grammarAccess.getTABAccess().getContentCONTENTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TAB__AddAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTABAccess().getAddADDParserRuleCall_1_0()); }
		ruleADD
		{ after(grammarAccess.getTABAccess().getAddADDParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Add2Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getADDAccess().getAdd2ADD2TerminalRuleCall_0_0()); }
		RULE_ADD2
		{ after(grammarAccess.getADDAccess().getAdd2ADD2TerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__N__IntegerAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNAccess().getIntegerINTEGERTerminalRuleCall_0_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getNAccess().getIntegerINTEGERTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__N__PrintAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNAccess().getPrintPRINTTerminalRuleCall_1_0()); }
		RULE_PRINT
		{ after(grammarAccess.getNAccess().getPrintPRINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_INSIDE2 : (RULE_ANY_OTHER|RULE_INTEGER ',');

RULE_ADD2 : (RULE_ANY_OTHER|RULE_INTEGER '+');

RULE_CONTENT : RULE_INTEGER '(' RULE_ID ')' RULE_PRINT;

RULE_INTEGER : RULE_INT;

RULE_PRINT : ' ++ " ' RULE_ID '!"';

fragment RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

fragment RULE_ANY_OTHER : .;
