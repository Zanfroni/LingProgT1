/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getTABAccess().getAlternatives(), "rule__TAB__Alternatives");
					put(grammarAccess.getHaskellAccess().getGroup(), "rule__Haskell__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_2(), "rule__Expression__Group_2__0");
					put(grammarAccess.getZIPAccess().getGroup(), "rule__ZIP__Group__0");
					put(grammarAccess.getINSIDEAccess().getGroup(), "rule__INSIDE__Group__0");
					put(grammarAccess.getADDAccess().getGroup(), "rule__ADD__Group__0");
					put(grammarAccess.getNAccess().getGroup(), "rule__N__Group__0");
					put(grammarAccess.getModelAccess().getHaskellAssignment(), "rule__Model__HaskellAssignment");
					put(grammarAccess.getHaskellAccess().getExpressionAssignment_1(), "rule__Haskell__ExpressionAssignment_1");
					put(grammarAccess.getExpressionAccess().getZipAssignment_0(), "rule__Expression__ZipAssignment_0");
					put(grammarAccess.getExpressionAccess().getOpAssignment_1_1(), "rule__Expression__OpAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getTabAssignment_2_1(), "rule__Expression__TabAssignment_2_1");
					put(grammarAccess.getExpressionAccess().getNAssignment_3(), "rule__Expression__NAssignment_3");
					put(grammarAccess.getZIPAccess().getOp2Assignment_2(), "rule__ZIP__Op2Assignment_2");
					put(grammarAccess.getZIPAccess().getOp3Assignment_5(), "rule__ZIP__Op3Assignment_5");
					put(grammarAccess.getOPAccess().getInsideAssignment(), "rule__OP__InsideAssignment");
					put(grammarAccess.getINSIDEAccess().getInside2Assignment_0(), "rule__INSIDE__Inside2Assignment_0");
					put(grammarAccess.getTABAccess().getContentAssignment_0(), "rule__TAB__ContentAssignment_0");
					put(grammarAccess.getTABAccess().getAddAssignment_1(), "rule__TAB__AddAssignment_1");
					put(grammarAccess.getADDAccess().getAdd2Assignment_0(), "rule__ADD__Add2Assignment_0");
					put(grammarAccess.getNAccess().getIntegerAssignment_0(), "rule__N__IntegerAssignment_0");
					put(grammarAccess.getNAccess().getPrintAssignment_1(), "rule__N__PrintAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
