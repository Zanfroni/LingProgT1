/*
 * generated by Xtext 2.14.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getHaskellHaskellParserRuleCall_0());
			}
			lv_haskell_0_0=ruleHaskell
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"haskell",
					lv_haskell_0_0,
					"org.xtext.example.mydsl.MyDsl.Haskell");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleHaskell
entryRuleHaskell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHaskellRule()); }
	iv_ruleHaskell=ruleHaskell
	{ $current=$iv_ruleHaskell.current; }
	EOF;

// Rule Haskell
ruleHaskell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='show'
		{
			newLeafNode(otherlv_0, grammarAccess.getHaskellAccess().getShowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHaskellAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHaskellRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getComplementComplementParserRuleCall_0_0());
				}
				lv_complement_0_0=ruleComplement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"complement",
						lv_complement_0_0,
						"org.xtext.example.mydsl.MyDsl.Complement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getConcatConcatParserRuleCall_1_0());
				}
				lv_concat_1_0=ruleConcat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"concat",
						lv_concat_1_0,
						"org.xtext.example.mydsl.MyDsl.Concat");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleComplement
entryRuleComplement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplementRule()); }
	iv_ruleComplement=ruleComplement
	{ $current=$iv_ruleComplement.current; }
	EOF;

// Rule Complement
ruleComplement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getComplementAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComplementRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.xtext.example.mydsl.MyDsl.ID");
				}
			)
		)
		    |
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getComplementAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComplementAccess().getNumbersNumbersParserRuleCall_1_1_0());
					}
					lv_numbers_2_0=ruleNumbers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComplementRule());
						}
						set(
							$current,
							"numbers",
							lv_numbers_2_0,
							"org.xtext.example.mydsl.MyDsl.Numbers");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getComplementAccess().getRightSquareBracketKeyword_1_2());
			}
		)
		    |
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getComplementAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComplementAccess().getFunctionFunctionParserRuleCall_2_1_0());
					}
					lv_function_5_0=ruleFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComplementRule());
						}
						set(
							$current,
							"function",
							lv_function_5_0,
							"org.xtext.example.mydsl.MyDsl.Function");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getComplementAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getElementElementParserRuleCall_0_0());
				}
				lv_element_0_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"element",
						lv_element_0_0,
						"org.xtext.example.mydsl.MyDsl.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='zip'
			{
				newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getZipKeyword_1_0());
			}
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftSquareBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getNumb1NumbersParserRuleCall_1_2_0());
					}
					lv_numb1_3_0=ruleNumbers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						set(
							$current,
							"numb1",
							lv_numb1_3_0,
							"org.xtext.example.mydsl.MyDsl.Numbers");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getRightSquareBracketKeyword_1_3());
			}
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getLeftSquareBracketKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getNumb2NumbersParserRuleCall_1_5_0());
					}
					lv_numb2_6_0=ruleNumbers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						set(
							$current,
							"numb2",
							lv_numb2_6_0,
							"org.xtext.example.mydsl.MyDsl.Numbers");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getRightSquareBracketKeyword_1_6());
			}
		)
		    |
		(
			otherlv_8='length'
			{
				newLeafNode(otherlv_8, grammarAccess.getFunctionAccess().getLengthKeyword_2_0());
			}
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2_1());
			}
			{
				newCompositeNode(grammarAccess.getFunctionAccess().getComplementParserRuleCall_2_2());
			}
			this_Complement_10=ruleComplement
			{
				$current = $this_Complement_10.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_2_3());
			}
		)
	)
;

// Entry rule entryRuleNumbers
entryRuleNumbers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumbersRule()); }
	iv_ruleNumbers=ruleNumbers
	{ $current=$iv_ruleNumbers.current; }
	EOF;

// Rule Numbers
ruleNumbers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_one_0_0=RULE_INT
					{
						newLeafNode(lv_one_0_0, grammarAccess.getNumbersAccess().getOneINTTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNumbersRule());
						}
						setWithLastConsumed(
							$current,
							"one",
							lv_one_0_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getNumbersAccess().getCommaKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNumbersAccess().getNumbNumbersParserRuleCall_0_2_0());
					}
					lv_numb_2_0=ruleNumbers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNumbersRule());
						}
						set(
							$current,
							"numb",
							lv_numb_2_0,
							"org.xtext.example.mydsl.MyDsl.Numbers");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				lv_two_3_0=RULE_INT
				{
					newLeafNode(lv_two_3_0, grammarAccess.getNumbersAccess().getTwoINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumbersRule());
					}
					setWithLastConsumed(
						$current,
						"two",
						lv_two_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleConcat
entryRuleConcat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcatRule()); }
	iv_ruleConcat=ruleConcat
	{ $current=$iv_ruleConcat.current; }
	EOF;

// Rule Concat
ruleConcat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='++'
		{
			newLeafNode(otherlv_0, grammarAccess.getConcatAccess().getPlusSignPlusSignKeyword_0());
		}
		(
			(
				(
					lv_id_1_0=RULE_ID
					{
						newLeafNode(lv_id_1_0, grammarAccess.getConcatAccess().getIdIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConcatRule());
						}
						setWithLastConsumed(
							$current,
							"id",
							lv_id_1_0,
							"org.xtext.example.mydsl.MyDsl.ID");
					}
				)
			)
			    |
			(
				(
					lv_op_2_0=RULE_OP
					{
						newLeafNode(lv_op_2_0, grammarAccess.getConcatAccess().getOpOPTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConcatRule());
						}
						setWithLastConsumed(
							$current,
							"op",
							lv_op_2_0,
							"org.xtext.example.mydsl.MyDsl.OP");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConcatAccess().getNewNewConcatParserRuleCall_2_0());
				}
				lv_new_3_0=ruleNewConcat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcatRule());
					}
					set(
						$current,
						"new",
						lv_new_3_0,
						"org.xtext.example.mydsl.MyDsl.NewConcat");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNewConcat
entryRuleNewConcat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewConcatRule()); }
	iv_ruleNewConcat=ruleNewConcat
	{ $current=$iv_ruleNewConcat.current; }
	EOF;

// Rule NewConcat
ruleNewConcat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='++'
		{
			newLeafNode(otherlv_0, grammarAccess.getNewConcatAccess().getPlusSignPlusSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNewConcatAccess().getHaskellHaskellParserRuleCall_1_0());
				}
				lv_haskell_1_0=ruleHaskell
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewConcatRule());
					}
					set(
						$current,
						"haskell",
						lv_haskell_1_0,
						"org.xtext.example.mydsl.MyDsl.Haskell");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current.getText(); }
	EOF;

// Rule Element
ruleElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getElementAccess().getINTTerminalRuleCall_0());
		}
		(
			this_OP_1=RULE_OP
			{
				$current.merge(this_OP_1);
			}
			{
				newLeafNode(this_OP_1, grammarAccess.getElementAccess().getOPTerminalRuleCall_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getElementAccess().getINTTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_OP : ('+'|'-'|'/'|'*');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'!'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
