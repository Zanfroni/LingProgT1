/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getHaskellHaskellParserRuleCall_0());
			}
			lv_haskell_0_0=ruleHaskell
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"haskell",
					lv_haskell_0_0,
					"org.xtext.example.mydsl.MyDsl.Haskell");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleHaskell
entryRuleHaskell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHaskellRule()); }
	iv_ruleHaskell=ruleHaskell
	{ $current=$iv_ruleHaskell.current; }
	EOF;

// Rule Haskell
ruleHaskell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='show'
		{
			newLeafNode(otherlv_0, grammarAccess.getHaskellAccess().getShowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHaskellAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHaskellRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.mydsl.MyDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getZipZIPParserRuleCall_0_0());
				}
				lv_zip_0_0=ruleZIP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"zip",
						lv_zip_0_0,
						"org.xtext.example.mydsl.MyDsl.ZIP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getOpOPParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleOP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.xtext.example.mydsl.MyDsl.OP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_1_2());
			}
		)
		    |
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getTabTABParserRuleCall_2_1_0());
					}
					lv_tab_5_0=ruleTAB
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"tab",
							lv_tab_5_0,
							"org.xtext.example.mydsl.MyDsl.TAB");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_2_2());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getNNParserRuleCall_3_0());
				}
				lv_n_7_0=ruleN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"n",
						lv_n_7_0,
						"org.xtext.example.mydsl.MyDsl.N");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleZIP
entryRuleZIP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getZIPRule()); }
	iv_ruleZIP=ruleZIP
	{ $current=$iv_ruleZIP.current; }
	EOF;

// Rule ZIP
ruleZIP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(zip'
		{
			newLeafNode(otherlv_0, grammarAccess.getZIPAccess().getZipKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getZIPAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getZIPAccess().getOp2OPParserRuleCall_2_0());
				}
				lv_op2_2_0=ruleOP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getZIPRule());
					}
					set(
						$current,
						"op2",
						lv_op2_2_0,
						"org.xtext.example.mydsl.MyDsl.OP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getZIPAccess().getRightSquareBracketKeyword_3());
		}
		otherlv_4='['
		{
			newLeafNode(otherlv_4, grammarAccess.getZIPAccess().getLeftSquareBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getZIPAccess().getOp3OPParserRuleCall_5_0());
				}
				lv_op3_5_0=ruleOP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getZIPRule());
					}
					set(
						$current,
						"op3",
						lv_op3_5_0,
						"org.xtext.example.mydsl.MyDsl.OP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getZIPAccess().getRightSquareBracketKeyword_6());
		}
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getZIPAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleOP
entryRuleOP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOPRule()); }
	iv_ruleOP=ruleOP
	{ $current=$iv_ruleOP.current; }
	EOF;

// Rule OP
ruleOP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getOPAccess().getInsideINSIDEParserRuleCall_0());
			}
			lv_inside_0_0=ruleINSIDE
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getOPRule());
				}
				add(
					$current,
					"inside",
					lv_inside_0_0,
					"org.xtext.example.mydsl.MyDsl.INSIDE");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleINSIDE
entryRuleINSIDE returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getINSIDERule()); }
	iv_ruleINSIDE=ruleINSIDE
	{ $current=$iv_ruleINSIDE.current; }
	EOF;

// Rule INSIDE
ruleINSIDE returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_inside2_0_0=RULE_INSIDE2
				{
					newLeafNode(lv_inside2_0_0, grammarAccess.getINSIDEAccess().getInside2INSIDE2TerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getINSIDERule());
					}
					setWithLastConsumed(
						$current,
						"inside2",
						lv_inside2_0_0,
						"org.xtext.example.mydsl.MyDsl.INSIDE2");
				}
			)
		)
		this_INTEGER_1=RULE_INTEGER
		{
			newLeafNode(this_INTEGER_1, grammarAccess.getINSIDEAccess().getINTEGERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleTAB
entryRuleTAB returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTABRule()); }
	iv_ruleTAB=ruleTAB
	{ $current=$iv_ruleTAB.current; }
	EOF;

// Rule TAB
ruleTAB returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_content_0_0=RULE_CONTENT
				{
					newLeafNode(lv_content_0_0, grammarAccess.getTABAccess().getContentCONTENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTABRule());
					}
					setWithLastConsumed(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.example.mydsl.MyDsl.CONTENT");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTABAccess().getAddADDParserRuleCall_1_0());
				}
				lv_add_1_0=ruleADD
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTABRule());
					}
					add(
						$current,
						"add",
						lv_add_1_0,
						"org.xtext.example.mydsl.MyDsl.ADD");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleADD
entryRuleADD returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getADDRule()); }
	iv_ruleADD=ruleADD
	{ $current=$iv_ruleADD.current; }
	EOF;

// Rule ADD
ruleADD returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_add2_0_0=RULE_ADD2
				{
					newLeafNode(lv_add2_0_0, grammarAccess.getADDAccess().getAdd2ADD2TerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getADDRule());
					}
					setWithLastConsumed(
						$current,
						"add2",
						lv_add2_0_0,
						"org.xtext.example.mydsl.MyDsl.ADD2");
				}
			)
		)
		this_INTEGER_1=RULE_INTEGER
		{
			newLeafNode(this_INTEGER_1, grammarAccess.getADDAccess().getINTEGERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleN
entryRuleN returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNRule()); }
	iv_ruleN=ruleN
	{ $current=$iv_ruleN.current; }
	EOF;

// Rule N
ruleN returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_integer_0_0=RULE_INTEGER
				{
					newLeafNode(lv_integer_0_0, grammarAccess.getNAccess().getIntegerINTEGERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNRule());
					}
					setWithLastConsumed(
						$current,
						"integer",
						lv_integer_0_0,
						"org.xtext.example.mydsl.MyDsl.INTEGER");
				}
			)
		)
		(
			(
				lv_print_1_0=RULE_PRINT
				{
					newLeafNode(lv_print_1_0, grammarAccess.getNAccess().getPrintPRINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNRule());
					}
					setWithLastConsumed(
						$current,
						"print",
						lv_print_1_0,
						"org.xtext.example.mydsl.MyDsl.PRINT");
				}
			)
		)
	)
;

RULE_INSIDE2 : (RULE_ANY_OTHER|RULE_INTEGER ',');

RULE_ADD2 : (RULE_ANY_OTHER|RULE_INTEGER '+');

RULE_CONTENT : RULE_INTEGER '(' RULE_ID ')' RULE_PRINT;

RULE_INTEGER : RULE_INT;

RULE_PRINT : ' ++ " ' RULE_ID '!"';

fragment RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

fragment RULE_ANY_OTHER : .;
