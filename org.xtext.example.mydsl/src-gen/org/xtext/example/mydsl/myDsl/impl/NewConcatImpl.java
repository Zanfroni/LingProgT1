/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.Haskell;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NewConcat;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>New Concat</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NewConcatImpl#getHaskell <em>Haskell</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class NewConcatImpl extends MinimalEObjectImpl.Container implements NewConcat
{
  /**
   * The cached value of the '{@link #getHaskell() <em>Haskell</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHaskell()
   * @generated
   * @ordered
   */
  protected Haskell haskell;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NewConcatImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.NEW_CONCAT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Haskell getHaskell()
  {
    return haskell;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHaskell(Haskell newHaskell, NotificationChain msgs)
  {
    Haskell oldHaskell = haskell;
    haskell = newHaskell;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.NEW_CONCAT__HASKELL, oldHaskell, newHaskell);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHaskell(Haskell newHaskell)
  {
    if (newHaskell != haskell)
    {
      NotificationChain msgs = null;
      if (haskell != null)
        msgs = ((InternalEObject)haskell).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.NEW_CONCAT__HASKELL, null, msgs);
      if (newHaskell != null)
        msgs = ((InternalEObject)newHaskell).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.NEW_CONCAT__HASKELL, null, msgs);
      msgs = basicSetHaskell(newHaskell, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.NEW_CONCAT__HASKELL, newHaskell, newHaskell));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.NEW_CONCAT__HASKELL:
        return basicSetHaskell(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.NEW_CONCAT__HASKELL:
        return getHaskell();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.NEW_CONCAT__HASKELL:
        setHaskell((Haskell)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NEW_CONCAT__HASKELL:
        setHaskell((Haskell)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NEW_CONCAT__HASKELL:
        return haskell != null;
    }
    return super.eIsSet(featureID);
  }

} //NewConcatImpl
