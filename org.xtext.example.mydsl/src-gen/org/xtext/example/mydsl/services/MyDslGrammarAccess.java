/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cHaskellAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cHaskellHaskellParserRuleCall_0 = (RuleCall)cHaskellAssignment.eContents().get(0);
		
		//Model:
		//	haskell+=Haskell*;
		@Override public ParserRule getRule() { return rule; }
		
		//haskell+=Haskell*
		public Assignment getHaskellAssignment() { return cHaskellAssignment; }
		
		//Haskell
		public RuleCall getHaskellHaskellParserRuleCall_0() { return cHaskellHaskellParserRuleCall_0; }
	}
	public class HaskellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Haskell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Haskell:
		//	'show' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'show' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'show'
		public Keyword getShowKeyword_0() { return cShowKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComplementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComplementComplementParserRuleCall_0_0 = (RuleCall)cComplementAssignment_0.eContents().get(0);
		private final Assignment cConcatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConcatConcatParserRuleCall_1_0 = (RuleCall)cConcatAssignment_1.eContents().get(0);
		
		//Expression:
		//	complement=Complement concat=Concat?;
		@Override public ParserRule getRule() { return rule; }
		
		//complement=Complement concat=Concat?
		public Group getGroup() { return cGroup; }
		
		//complement=Complement
		public Assignment getComplementAssignment_0() { return cComplementAssignment_0; }
		
		//Complement
		public RuleCall getComplementComplementParserRuleCall_0_0() { return cComplementComplementParserRuleCall_0_0; }
		
		//concat=Concat?
		public Assignment getConcatAssignment_1() { return cConcatAssignment_1; }
		
		//Concat
		public RuleCall getConcatConcatParserRuleCall_1_0() { return cConcatConcatParserRuleCall_1_0; }
	}
	public class ComplementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Complement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNumbersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNumbersNumbersParserRuleCall_1_1_0 = (RuleCall)cNumbersAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFunctionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_2_1_0 = (RuleCall)cFunctionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Complement:
		//	id=ID
		//	| '[' numbers=Numbers ']'
		//	| '(' function=Function ')';
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID | '[' numbers=Numbers ']' | '(' function=Function ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//'[' numbers=Numbers ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//numbers=Numbers
		public Assignment getNumbersAssignment_1_1() { return cNumbersAssignment_1_1; }
		
		//Numbers
		public RuleCall getNumbersNumbersParserRuleCall_1_1_0() { return cNumbersNumbersParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'(' function=Function ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_2_1() { return cFunctionAssignment_2_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_1_0() { return cFunctionFunctionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementElementParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cZipKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNumb1Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNumb1NumbersParserRuleCall_1_2_0 = (RuleCall)cNumb1Assignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cNumb2Assignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cNumb2NumbersParserRuleCall_1_5_0 = (RuleCall)cNumb2Assignment_1_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLengthKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cComplementParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Function:
		//	element=Element
		//	| 'zip' '[' numb1=Numbers ']' '[' numb2=Numbers ']'
		//	| 'length' '(' Complement ')';
		@Override public ParserRule getRule() { return rule; }
		
		//element=Element | 'zip' '[' numb1=Numbers ']' '[' numb2=Numbers ']' | 'length' '(' Complement ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//element=Element
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_0_0() { return cElementElementParserRuleCall_0_0; }
		
		//'zip' '[' numb1=Numbers ']' '[' numb2=Numbers ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'zip'
		public Keyword getZipKeyword_1_0() { return cZipKeyword_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//numb1=Numbers
		public Assignment getNumb1Assignment_1_2() { return cNumb1Assignment_1_2; }
		
		//Numbers
		public RuleCall getNumb1NumbersParserRuleCall_1_2_0() { return cNumb1NumbersParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_4() { return cLeftSquareBracketKeyword_1_4; }
		
		//numb2=Numbers
		public Assignment getNumb2Assignment_1_5() { return cNumb2Assignment_1_5; }
		
		//Numbers
		public RuleCall getNumb2NumbersParserRuleCall_1_5_0() { return cNumb2NumbersParserRuleCall_1_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_6() { return cRightSquareBracketKeyword_1_6; }
		
		//'length' '(' Complement ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'length'
		public Keyword getLengthKeyword_2_0() { return cLengthKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//Complement
		public RuleCall getComplementParserRuleCall_2_2() { return cComplementParserRuleCall_2_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class NumbersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Numbers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOneAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOneINTTerminalRuleCall_0_0_0 = (RuleCall)cOneAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNumbAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNumbNumbersParserRuleCall_0_2_0 = (RuleCall)cNumbAssignment_0_2.eContents().get(0);
		private final Assignment cTwoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTwoINTTerminalRuleCall_1_0 = (RuleCall)cTwoAssignment_1.eContents().get(0);
		
		//Numbers:
		//	one=INT ',' numb=Numbers | two=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//one=INT ',' numb=Numbers | two=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//one=INT ',' numb=Numbers
		public Group getGroup_0() { return cGroup_0; }
		
		//one=INT
		public Assignment getOneAssignment_0_0() { return cOneAssignment_0_0; }
		
		//INT
		public RuleCall getOneINTTerminalRuleCall_0_0_0() { return cOneINTTerminalRuleCall_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//numb=Numbers
		public Assignment getNumbAssignment_0_2() { return cNumbAssignment_0_2; }
		
		//Numbers
		public RuleCall getNumbNumbersParserRuleCall_0_2_0() { return cNumbNumbersParserRuleCall_0_2_0; }
		
		//two=INT
		public Assignment getTwoAssignment_1() { return cTwoAssignment_1; }
		
		//INT
		public RuleCall getTwoINTTerminalRuleCall_1_0() { return cTwoINTTerminalRuleCall_1_0; }
	}
	public class ConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Concat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOpOPTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cNewAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewNewConcatParserRuleCall_2_0 = (RuleCall)cNewAssignment_2.eContents().get(0);
		
		//Concat:
		//	'++' (id=ID | op=OP) new=NewConcat?;
		@Override public ParserRule getRule() { return rule; }
		
		//'++' (id=ID | op=OP) new=NewConcat?
		public Group getGroup() { return cGroup; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }
		
		//id=ID | op=OP
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//id=ID
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0_0() { return cIdIDTerminalRuleCall_1_0_0; }
		
		//op=OP
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP
		public RuleCall getOpOPTerminalRuleCall_1_1_0() { return cOpOPTerminalRuleCall_1_1_0; }
		
		//new=NewConcat?
		public Assignment getNewAssignment_2() { return cNewAssignment_2; }
		
		//NewConcat
		public RuleCall getNewNewConcatParserRuleCall_2_0() { return cNewNewConcatParserRuleCall_2_0; }
	}
	public class NewConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NewConcat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHaskellAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHaskellHaskellParserRuleCall_1_0 = (RuleCall)cHaskellAssignment_1.eContents().get(0);
		
		//NewConcat:
		//	'++' haskell=Haskell;
		@Override public ParserRule getRule() { return rule; }
		
		//'++' haskell=Haskell
		public Group getGroup() { return cGroup; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }
		
		//haskell=Haskell
		public Assignment getHaskellAssignment_1() { return cHaskellAssignment_1; }
		
		//Haskell
		public RuleCall getHaskellHaskellParserRuleCall_1_0() { return cHaskellHaskellParserRuleCall_1_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Element:
		//	INT (OP INT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//INT (OP INT)*
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//(OP INT)*
		public Group getGroup_1() { return cGroup_1; }
		
		//OP
		public RuleCall getOPTerminalRuleCall_1_0() { return cOPTerminalRuleCall_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final HaskellElements pHaskell;
	private final ExpressionElements pExpression;
	private final ComplementElements pComplement;
	private final FunctionElements pFunction;
	private final NumbersElements pNumbers;
	private final ConcatElements pConcat;
	private final NewConcatElements pNewConcat;
	private final ElementElements pElement;
	private final TerminalRule tOP;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pHaskell = new HaskellElements();
		this.pExpression = new ExpressionElements();
		this.pComplement = new ComplementElements();
		this.pFunction = new FunctionElements();
		this.pNumbers = new NumbersElements();
		this.pConcat = new ConcatElements();
		this.pNewConcat = new NewConcatElements();
		this.pElement = new ElementElements();
		this.tOP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OP");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	haskell+=Haskell*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Haskell:
	//	'show' expression=Expression;
	public HaskellElements getHaskellAccess() {
		return pHaskell;
	}
	
	public ParserRule getHaskellRule() {
		return getHaskellAccess().getRule();
	}
	
	//Expression:
	//	complement=Complement concat=Concat?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Complement:
	//	id=ID
	//	| '[' numbers=Numbers ']'
	//	| '(' function=Function ')';
	public ComplementElements getComplementAccess() {
		return pComplement;
	}
	
	public ParserRule getComplementRule() {
		return getComplementAccess().getRule();
	}
	
	//Function:
	//	element=Element
	//	| 'zip' '[' numb1=Numbers ']' '[' numb2=Numbers ']'
	//	| 'length' '(' Complement ')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Numbers:
	//	one=INT ',' numb=Numbers | two=INT;
	public NumbersElements getNumbersAccess() {
		return pNumbers;
	}
	
	public ParserRule getNumbersRule() {
		return getNumbersAccess().getRule();
	}
	
	//Concat:
	//	'++' (id=ID | op=OP) new=NewConcat?;
	public ConcatElements getConcatAccess() {
		return pConcat;
	}
	
	public ParserRule getConcatRule() {
		return getConcatAccess().getRule();
	}
	
	//NewConcat:
	//	'++' haskell=Haskell;
	public NewConcatElements getNewConcatAccess() {
		return pNewConcat;
	}
	
	public ParserRule getNewConcatRule() {
		return getNewConcatAccess().getRule();
	}
	
	//Element:
	//	INT (OP INT)*;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//terminal OP:
	//	'+' | '-' | '/' | '*';
	public TerminalRule getOPRule() {
		return tOP;
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '!' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
