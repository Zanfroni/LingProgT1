/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cHaskellAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cHaskellHaskellParserRuleCall_0 = (RuleCall)cHaskellAssignment.eContents().get(0);
		
		//Model:
		//	haskell+=Haskell*;
		@Override public ParserRule getRule() { return rule; }
		
		//haskell+=Haskell*
		public Assignment getHaskellAssignment() { return cHaskellAssignment; }
		
		//Haskell
		public RuleCall getHaskellHaskellParserRuleCall_0() { return cHaskellHaskellParserRuleCall_0; }
	}
	public class HaskellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Haskell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Haskell:
		//	'show' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'show' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'show'
		public Keyword getShowKeyword_0() { return cShowKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cZipAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cZipZIPParserRuleCall_0_0 = (RuleCall)cZipAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOPParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTabAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTabTABParserRuleCall_2_1_0 = (RuleCall)cTabAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNNParserRuleCall_3_0 = (RuleCall)cNAssignment_3.eContents().get(0);
		
		//Expression:
		//	zip=ZIP | '[' op=OP ']' | '(' tab=TAB ')' | n=N;
		@Override public ParserRule getRule() { return rule; }
		
		//zip=ZIP | '[' op=OP ']' | '(' tab=TAB ')' | n=N
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//zip=ZIP
		public Assignment getZipAssignment_0() { return cZipAssignment_0; }
		
		//ZIP
		public RuleCall getZipZIPParserRuleCall_0_0() { return cZipZIPParserRuleCall_0_0; }
		
		//'[' op=OP ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//op=OP
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP
		public RuleCall getOpOPParserRuleCall_1_1_0() { return cOpOPParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'(' tab=TAB ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//tab=TAB
		public Assignment getTabAssignment_2_1() { return cTabAssignment_2_1; }
		
		//TAB
		public RuleCall getTabTABParserRuleCall_2_1_0() { return cTabTABParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//n=N
		public Assignment getNAssignment_3() { return cNAssignment_3; }
		
		//N
		public RuleCall getNNParserRuleCall_3_0() { return cNNParserRuleCall_3_0; }
	}
	public class ZIPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ZIP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2OPParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOp3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOp3OPParserRuleCall_5_0 = (RuleCall)cOp3Assignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ZIP:
		//	'(zip' '[' op2=OP ']' '[' op3=OP ']' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(zip' '[' op2=OP ']' '[' op3=OP ']' ')'
		public Group getGroup() { return cGroup; }
		
		//'(zip'
		public Keyword getZipKeyword_0() { return cZipKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//op2=OP
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//OP
		public RuleCall getOp2OPParserRuleCall_2_0() { return cOp2OPParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//op3=OP
		public Assignment getOp3Assignment_5() { return cOp3Assignment_5; }
		
		//OP
		public RuleCall getOp3OPParserRuleCall_5_0() { return cOp3OPParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OP");
		private final Assignment cInsideAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInsideINSIDEParserRuleCall_0 = (RuleCall)cInsideAssignment.eContents().get(0);
		
		//OP:
		//	inside+=INSIDE*;
		@Override public ParserRule getRule() { return rule; }
		
		//inside+=INSIDE*
		public Assignment getInsideAssignment() { return cInsideAssignment; }
		
		//INSIDE
		public RuleCall getInsideINSIDEParserRuleCall_0() { return cInsideINSIDEParserRuleCall_0; }
	}
	public class INSIDEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INSIDE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInside2Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInside2INSIDE2TerminalRuleCall_0_0 = (RuleCall)cInside2Assignment_0.eContents().get(0);
		private final RuleCall cINTEGERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//INSIDE:
		//	inside2=INSIDE2 INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//inside2=INSIDE2 INTEGER
		public Group getGroup() { return cGroup; }
		
		//inside2=INSIDE2
		public Assignment getInside2Assignment_0() { return cInside2Assignment_0; }
		
		//INSIDE2
		public RuleCall getInside2INSIDE2TerminalRuleCall_0_0() { return cInside2INSIDE2TerminalRuleCall_0_0; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_1() { return cINTEGERTerminalRuleCall_1; }
	}
	public class TABElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TAB");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cContentCONTENTTerminalRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final Assignment cAddAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAddADDParserRuleCall_1_0 = (RuleCall)cAddAssignment_1.eContents().get(0);
		
		//TAB:
		//	content=CONTENT | add+=ADD*;
		@Override public ParserRule getRule() { return rule; }
		
		//content=CONTENT | add+=ADD*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//content=CONTENT
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }
		
		//CONTENT
		public RuleCall getContentCONTENTTerminalRuleCall_0_0() { return cContentCONTENTTerminalRuleCall_0_0; }
		
		//add+=ADD*
		public Assignment getAddAssignment_1() { return cAddAssignment_1; }
		
		//ADD
		public RuleCall getAddADDParserRuleCall_1_0() { return cAddADDParserRuleCall_1_0; }
	}
	public class ADDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ADD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdd2Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdd2ADD2TerminalRuleCall_0_0 = (RuleCall)cAdd2Assignment_0.eContents().get(0);
		private final RuleCall cINTEGERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ADD:
		//	add2=ADD2 INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//add2=ADD2 INTEGER
		public Group getGroup() { return cGroup; }
		
		//add2=ADD2
		public Assignment getAdd2Assignment_0() { return cAdd2Assignment_0; }
		
		//ADD2
		public RuleCall getAdd2ADD2TerminalRuleCall_0_0() { return cAdd2ADD2TerminalRuleCall_0_0; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_1() { return cINTEGERTerminalRuleCall_1; }
	}
	public class NElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.N");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntegerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntegerINTEGERTerminalRuleCall_0_0 = (RuleCall)cIntegerAssignment_0.eContents().get(0);
		private final Assignment cPrintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrintPRINTTerminalRuleCall_1_0 = (RuleCall)cPrintAssignment_1.eContents().get(0);
		
		//N:
		//	integer=INTEGER print=PRINT;
		@Override public ParserRule getRule() { return rule; }
		
		//integer=INTEGER print=PRINT
		public Group getGroup() { return cGroup; }
		
		//integer=INTEGER
		public Assignment getIntegerAssignment_0() { return cIntegerAssignment_0; }
		
		//INTEGER
		public RuleCall getIntegerINTEGERTerminalRuleCall_0_0() { return cIntegerINTEGERTerminalRuleCall_0_0; }
		
		//print=PRINT
		public Assignment getPrintAssignment_1() { return cPrintAssignment_1; }
		
		//PRINT
		public RuleCall getPrintPRINTTerminalRuleCall_1_0() { return cPrintPRINTTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final HaskellElements pHaskell;
	private final ExpressionElements pExpression;
	private final ZIPElements pZIP;
	private final OPElements pOP;
	private final INSIDEElements pINSIDE;
	private final TerminalRule tINSIDE2;
	private final TABElements pTAB;
	private final ADDElements pADD;
	private final TerminalRule tADD2;
	private final TerminalRule tCONTENT;
	private final NElements pN;
	private final TerminalRule tINTEGER;
	private final TerminalRule tPRINT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pHaskell = new HaskellElements();
		this.pExpression = new ExpressionElements();
		this.pZIP = new ZIPElements();
		this.pOP = new OPElements();
		this.pINSIDE = new INSIDEElements();
		this.tINSIDE2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INSIDE2");
		this.pTAB = new TABElements();
		this.pADD = new ADDElements();
		this.tADD2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ADD2");
		this.tCONTENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CONTENT");
		this.pN = new NElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INTEGER");
		this.tPRINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PRINT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	haskell+=Haskell*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Haskell:
	//	'show' expression=Expression;
	public HaskellElements getHaskellAccess() {
		return pHaskell;
	}
	
	public ParserRule getHaskellRule() {
		return getHaskellAccess().getRule();
	}
	
	//Expression:
	//	zip=ZIP | '[' op=OP ']' | '(' tab=TAB ')' | n=N;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ZIP:
	//	'(zip' '[' op2=OP ']' '[' op3=OP ']' ')';
	public ZIPElements getZIPAccess() {
		return pZIP;
	}
	
	public ParserRule getZIPRule() {
		return getZIPAccess().getRule();
	}
	
	//OP:
	//	inside+=INSIDE*;
	public OPElements getOPAccess() {
		return pOP;
	}
	
	public ParserRule getOPRule() {
		return getOPAccess().getRule();
	}
	
	//INSIDE:
	//	inside2=INSIDE2 INTEGER;
	public INSIDEElements getINSIDEAccess() {
		return pINSIDE;
	}
	
	public ParserRule getINSIDERule() {
		return getINSIDEAccess().getRule();
	}
	
	//terminal INSIDE2:
	//	ANY_OTHER | INTEGER ',';
	public TerminalRule getINSIDE2Rule() {
		return tINSIDE2;
	}
	
	//TAB:
	//	content=CONTENT | add+=ADD*;
	public TABElements getTABAccess() {
		return pTAB;
	}
	
	public ParserRule getTABRule() {
		return getTABAccess().getRule();
	}
	
	//ADD:
	//	add2=ADD2 INTEGER;
	public ADDElements getADDAccess() {
		return pADD;
	}
	
	public ParserRule getADDRule() {
		return getADDAccess().getRule();
	}
	
	//terminal ADD2:
	//	ANY_OTHER | INTEGER '+';
	public TerminalRule getADD2Rule() {
		return tADD2;
	}
	
	//terminal CONTENT:
	//	INTEGER '(' ID ')' PRINT;
	public TerminalRule getCONTENTRule() {
		return tCONTENT;
	}
	
	//N:
	//	integer=INTEGER print=PRINT;
	public NElements getNAccess() {
		return pN;
	}
	
	public ParserRule getNRule() {
		return getNAccess().getRule();
	}
	
	//terminal INTEGER:
	//	INT;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal PRINT:
	//	' ++ " ' ID '!"';
	public TerminalRule getPRINTRule() {
		return tPRINT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
