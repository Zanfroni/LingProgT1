/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.ADD;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.Haskell;
import org.xtext.example.mydsl.myDsl.INSIDE;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.N;
import org.xtext.example.mydsl.myDsl.OP;
import org.xtext.example.mydsl.myDsl.TAB;
import org.xtext.example.mydsl.myDsl.ZIP;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ADD:
				sequence_ADD(context, (ADD) semanticObject); 
				return; 
			case MyDslPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case MyDslPackage.HASKELL:
				sequence_Haskell(context, (Haskell) semanticObject); 
				return; 
			case MyDslPackage.INSIDE:
				sequence_INSIDE(context, (INSIDE) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.N:
				sequence_N(context, (N) semanticObject); 
				return; 
			case MyDslPackage.OP:
				sequence_OP(context, (OP) semanticObject); 
				return; 
			case MyDslPackage.TAB:
				sequence_TAB(context, (TAB) semanticObject); 
				return; 
			case MyDslPackage.ZIP:
				sequence_ZIP(context, (ZIP) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ADD returns ADD
	 *
	 * Constraint:
	 *     add2=ADD2
	 */
	protected void sequence_ADD(ISerializationContext context, ADD semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ADD__ADD2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ADD__ADD2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getADDAccess().getAdd2ADD2TerminalRuleCall_0_0(), semanticObject.getAdd2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (zip=ZIP | op=OP | tab=TAB | n=N)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Haskell returns Haskell
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_Haskell(ISerializationContext context, Haskell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.HASKELL__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.HASKELL__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHaskellAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     INSIDE returns INSIDE
	 *
	 * Constraint:
	 *     inside2=INSIDE2
	 */
	protected void sequence_INSIDE(ISerializationContext context, INSIDE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.INSIDE__INSIDE2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.INSIDE__INSIDE2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getINSIDEAccess().getInside2INSIDE2TerminalRuleCall_0_0(), semanticObject.getInside2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     haskell+=Haskell+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     N returns N
	 *
	 * Constraint:
	 *     (integer=INTEGER print=PRINT)
	 */
	protected void sequence_N(ISerializationContext context, N semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.N__INTEGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.N__INTEGER));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.N__PRINT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.N__PRINT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNAccess().getIntegerINTEGERTerminalRuleCall_0_0(), semanticObject.getInteger());
		feeder.accept(grammarAccess.getNAccess().getPrintPRINTTerminalRuleCall_1_0(), semanticObject.getPrint());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OP returns OP
	 *
	 * Constraint:
	 *     inside+=INSIDE+
	 */
	protected void sequence_OP(ISerializationContext context, OP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TAB returns TAB
	 *
	 * Constraint:
	 *     (content=CONTENT | add+=ADD+)
	 */
	protected void sequence_TAB(ISerializationContext context, TAB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ZIP returns ZIP
	 *
	 * Constraint:
	 *     (op2=OP op3=OP)
	 */
	protected void sequence_ZIP(ISerializationContext context, ZIP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ZIP__OP2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ZIP__OP2));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ZIP__OP3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ZIP__OP3));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getZIPAccess().getOp2OPParserRuleCall_2_0(), semanticObject.getOp2());
		feeder.accept(grammarAccess.getZIPAccess().getOp3OPParserRuleCall_5_0(), semanticObject.getOp3());
		feeder.finish();
	}
	
	
}
